// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  password    String
  createdAt   DateTime      @default(now())
  articles    ArticleList[]
  UserHasFeed FeedList[]
  settings    Settings[]
}

model Feed {
  id          String     @id @default(uuid())
  title       String
  link        String     @unique @db.VarChar(1000)
  createdAt   DateTime   @default(now())
  faviconUrl  String?    @db.VarChar(1000)
  lastUpdate  DateTime   @default(now())
  active      Boolean    @default(true)
  UserHasFeed FeedList[]
  Article     Article[]
}

model FeedList {
  userId     String
  feedId     String
  openInApp  Boolean  @default(true)
  followedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  feed       Feed     @relation(fields: [feedId], references: [id])

  @@id([userId, feedId])
}

model Article {
  id             String        @id @default(uuid())
  title          String
  link           String        @db.VarChar(1000)
  imageUrl       String?       @db.VarChar(1000)
  createdAt      DateTime      @default(now())
  publishedAt    DateTime?
  feedId         String
  ArticleHasUser ArticleList[]
  feed           Feed          @relation(fields: [feedId], references: [id])
  categoryId     String?
  category       Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
}

model Settings {
  id            String @id @default(uuid())
  expTimeRead   Int
  expTimeUnread Int
  userId        String
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ArticleList {
  articleId String
  userId    String
  seen      Boolean   @default(false)
  saved     Boolean   @default(false)
  read      Boolean   @default(false)
  starred   Boolean   @default(false)
  dateSeen  DateTime?
  dateSaved DateTime?
  dateRead  DateTime?
  dateStar  DateTime?
  article   Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([articleId, userId])
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  articles  Article[]
}
